// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String?
  password      String
  accounts      Account[]
  sessions      Session[]
  ResetPassword ResetPassword[]
  Cart          Cart[]
  orders        Order[]
  Address       Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ResetPassword {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProductStatus {
  NEW
  HOT
  NORMAL
}

enum Currency {
  CNY
  USD
  EUR
  JPY
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  currency    Currency      @default(CNY)
  status      ProductStatus @default(NORMAL)
  image       String
  detail      String // 新增：商品详细介绍，是富文本格式
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  CartItem    CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        String?
  user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  addressId     Int? // 👈 新增字段
  address       Address?    @relation(fields: [addressId], references: [id]) // 👈 新增关系
  totalAmount   Decimal
  status        String      @default("pending")
  paypalId      String?     @unique
  paymentStatus String      @default("unpaid")
  paidAt        DateTime?
  transactionId String?
  amountPaid    Decimal     @default(0.00)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  fullName   String
  phone      String
  address    String
  city       String
  postalCode String?
  country    String
  isDefault  Boolean  @default(false)
  orders     Order[] // 可选：表示这个地址被用于哪些订单
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
